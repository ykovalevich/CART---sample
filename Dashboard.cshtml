@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_LayoutPretty.cshtml";
}

@section styles {
    <style>
        .tab {
            width: 50%;
        }

        .notATab {
            margin-right: 10px;
            padding-top: 7px;
            padding-bottom: 7px;
            padding-right: 55px;
            padding-left: 55px;
            border: 1px solid #1ab394;
            border-radius: 8px;
            color: #1ab394;
            font-weight: bold;
        }

            .notATab:not(.selected):hover {
                background-color: #d2f9e6;
            }

        .selected {
            color: white;
            background-color: #1ab394;
        }

        .left {
            float: left;
            width: 40%;
        }

        .right {
            float: right;
            width: 40%;
        }

        .searchBox {
            width: 50%;
        }

        .form-control {
            display: inline-block !important;
        }

        .sortTitle {
            color: black;
            font-weight: bold;
        
        }

        .editButton {
            padding: 0px 10px 0px 10px;
            color: #1ab394;
        }

        .chnButton {
            color: #1ab394;
        }

        .caButton {
            color: #1ab394;
        }

        .table > thead > tr > th {
            border-bottom: none;
        }

        .btn-group {
            margin-right: 20px;
        }

        .ibox {
            margin-top: 30px;
        }

        .clients-list {
            margin-top: 70px;
        }

        .btn-addClient {
            /*margin-left: 70px;
            padding-top: 7px;
            padding-bottom: 7px;
            padding-right: 55px;
            padding-left: 55px;*/
            border: 1px solid #1ab394;
            border-radius: 8px;
            background-color: #1ab394;
            color: white;
            font-weight: bold;
            float: right;
        }

        span{
            cursor: pointer;
        }

        .form-drop{
            
        }
        #addressSearchContainer {
            padding-right: 0px;
           
        }

        #map-canvas {
            margin-top: 30px;    
            max-width: 100%;
            height: 500px;
            background-color: #F3F3F4;
            margin-left: 5%;
            position: absolute;
            z-index: 1;
            width: 80%;       
        }

        #selectContainer {
            padding-left: 0px;
        }

        #searchFilterContainer {
            padding: 0px;
        }

        #searchContainer {
            border-bottom: 6px double rgba(0,0,0,.04);
            padding-bottom: 6%;
            margin-bottom: 6%;
            padding-right: 0px;
        }

        .search-radius-row {
            margin-top: 9px;
            padding: 0px;
        }

        .client-forms-selects {
            margin-top: 10px;
        }

        #actionLabel {
            padding-right: 30px;
            vertical-align: middle;
        }

        div .search-border {
            border-top: 1px solid black;
            width: 100%;
            color: blue;
            margin: 0 45px
        }

    </style>

}
<div class="row wrapper border-bottom white-bg page-heading">
    <h2>Clients</h2>
</div>

<div class="row wrapper" data-ng-controller="clientController as main" data-ng-cloak>
    <div class="col-sm-8">
        <div class="ibox">
            <div class="ibox-title">
                <div class="col-sm-12" id="searchContainer">
                    <div class="col-sm-4" id="searchFilterContainer">
                        <input type="text" placeholder="Search Client" class="input form-control" 
                               data-ng-model="main.searchClient" 
                               data-ng-model-options="{debounce: 400}"
                               data-ng-change="main.onSearchClientChange()">
                    </div>
                    <form class="col-sm-offset-2 col-sm-6 form-inline" id="addressSearchContainer">
                        <div class="input-group pull-right">
                            <input type="text" placeholder="Filter By Address" class="input form-control" data-ng-model="main.matchedAddress">
                            <div class="col-sm-12 search-radius-row">
                                <div class="col-sm-5" id="selectContainer">
                                    <select class="form-control" data-ng-model="main.addressRadius">
                                        <option value="">Radius (mi)</option>
                                        <option value="5">5 mi</option>
                                        <option value="20">20 mi</option>
                                        <option value="50">50 mi</option>
                                    </select>
                                </div>
                                <button type="button" class="btn btn-primary pull-right col-sm-3" data-ng-click="main.submitCAddress(main.matchedAddress)">Search</button>
                            </div>
                            
                            
                        </div>
                    </form>

                     
                </div>
                

                <div class="clients-list">
                    <div class="col-sm-12" id="clientButtons">
                        <div class="row">
                            <a href="#/myClients">
                                <span class="notATab" data-ng-class="{selected: main.showMy}">My Clients</span>
                            </a>
                            <a href="#/allClients">
                                <span class="notATab secondTab" data-ng-class="{selected: main.showAll}">All Clients</span>
                            </a>
                            <a href="/clients" class="btn-addClient btn btn-primary">
                                Add New Client
                            </a>
                        </div>
                 
                    </div>

                    <div class="tab-content col-sm-12">
                        <div id="tab-1" class="tab-pane active">
                            <div class="full-height-scroll">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <td>
                                                    <span class="sortTitle" ng-click="main.onClickSort('name')">
                                                        Name
                                                        <span ng-show="main.sortType == 'name' && !main.sortReverse" class="fa fa-caret-down"></span>
                                                        <span ng-show="main.sortType == 'name' && main.sortReverse" class="fa fa-caret-up"></span>
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="sortTitle" ng-click="main.onClickSort('patientId')">
                                                        Patient Id
                                                        <span ng-show="main.sortType == 'patientId' && !main.sortReverse" class="fa fa-caret-down"></span>
                                                        <span ng-show="main.sortType == 'patientId' && main.sortReverse" class="fa fa-caret-up"></span>
                                                    </span>
                                                </td>
                                                <th class="sortTitle text-right" id="actionLabel" data-sort-ignore="true">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr data-ng-repeat="client in (main.filteredClients = (main.displayClients | orderBy:main.sortType:main.sortReverse | filter:main.searchClient | limitTo : main.pageSize : main.lowerLimit))"
                                                data-ng-if="main.clientsExist">
                                                @*<td class="client-avatar"><img alt="image" src="#"> </td>*@
                                                <td>{{client.name}}</td>
                                                <td> {{client.patientId}}</td>
                                                <td class="text-right">
                                                    <div class="btn-group">
                                                        <div>
                                                            <a href="/clients/{{client.id}}/edit" class="btn-white btn btn-xs editButton">Edit Client</a>
                                                        </div>
                                                        <div class="client-forms-selects">
                                                            <a href="/chnforms/index?clientId={{client.id}}" class="btn-white btn btn-xs chnButton">New CHN Form</a>
                                                            <a href="/CAForms/index2/#/{{client.id}}/add" class="btn-white btn btn-xs caButton">New CA Form</a>
                                                            <select class="btn-white form-drop chnButton"
                                                                    data-ng-model="client.formInstance"
                                                                    data-ng-options="template.name for template in main.formTemplates"
                                                                    data-ng-change="main.onChange(client.id, client.formInstance.id)">
                                                                <option style="display:none"
                                                                        value="">
                                                                    Edit Form
                                                                </option>
                                                            </select>
                                                        </div>
                                                        
                                                        
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <pagination ng-model="main.currentPage"
                                total-items="main.displayClients.length"
                                items-per-page="main.pageSize"
                                max-size="10"
                                boundary-links="true"
                                data-ng-change="main.changeCurrentPage(main.currentPage)">
                    </pagination>

                </div>
            </div>
        </div>
    </div>

    <div>
        <div class="col-sm-4">
            <div id="map-canvas"></div>
        </div>
    </div>

</div>
@section scripts {
    <script src="~/Scripts/sabio.services.clients.js"></script>
    <script src="~/Scripts/sabio.services.form.js"></script>
    <script src="~/Scripts/notification.service.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCbesy30dZUQlc7lLbl_th-7kQci33w8Ow"></script>
    <script type="text/javascript">

        (function () {
            "use strict";

            angular.module(APPNAME)
                 .factory('$clientService', ClientServiceFactory);

            ClientServiceFactory.$inject = ['$baseService'];

            function ClientServiceFactory($baseService) {

                var aSabioServiceObject = sabio.services.clients;

                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

                return newService;
            }

        })();

        (function () {
            "use strict";

            angular.module(APPNAME)
                 .factory('$formService', FormServiceFactory);

            FormServiceFactory.$inject = ['$baseService'];

            function FormServiceFactory($baseService) {

                var aSabioServiceObject = sabio.services.form;

                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

                return newService;
            }

        })();

        (function () {
            "use strict";

            angular.module(APPNAME)
                .config(["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {

                    // .http://www.bennadel.com/blog/2420-mapping-angularjs-routes-onto-url-parameters-and-client-side-events.htm
                    // non-standard routing, see above

                    $routeProvider.when('/allClients', {
                        action: "allClients"
                    }).otherwise({
                        action: "myClients"
                    });

                    $locationProvider.html5Mode(false);

                }]);

        })();


        (function () {
            "use strict";
            var myapp = angular.module(APPNAME);

            myapp.controller('clientController', ClientController);

            ClientController.$inject = ['$scope',
                                        '$baseController',
                                        '$clientService',
                                        '$route',
                                        '$routeParams',
                                        '$geocoderService',
                                        '$notificationService',
                                        '$formService',
                                        '$location',
                                        '$window',
                                        '$timeout'];

            function ClientController(
                    $scope,
                    $baseController,
                    $clientService,
                    $route,
                    $routeParams,
                    $geocoderService,
                    $notificationService,
                    $formService,
                    $location,
                    $window,
                    $timeout) {

                var vm = this;

                $baseController.merge(vm, $baseController);

                vm.$scope = $scope;
                vm.$clientService = $clientService;
                vm.$formService = $formService;
                vm.$geocoderService = $geocoderService;
                vm.$notificationService = $notificationService;
                vm.$location = $location;
                vm.$window = $window;

                vm.allClients = null;
                vm.clientsExist = true;
                vm.coordinatesArray = null;
                vm.currentPage = 1;
                vm.displayClients = [];
                vm.lowerLimit = 0;
                vm.mapInitialized = false;
                vm.markers = [];
                vm.pageSize = 20;
                vm.searchClient;
                vm.showAll = false;
                vm.showMy = false;
                vm.sortReverse;
                vm.sortType = null;
                vm.userClients = null;

                vm.displayClients.formInstance;
                vm.onChange = _onChange;
                vm.initializeMap = _initializeMap;
                vm.onClickSort = _onClickSort;
                vm.onError = _onError;
                vm.onGetByUserIdSuccess = _onGetByUserIdSuccess;
                vm.onGetAllClientSuccess = _onGetAllClientSuccess;
                vm.getAllFormsSuccess = _getAllFormsSuccess;
                vm.getAllFormsFail = _getAllFormsFail;
                vm.submitCAddress = _submitCAddress;
                vm.onGeocode = _onGeocode;
                vm.onGetAddressesNearbySuccess = _onGetAddressesNearbySuccess;
                vm.populateFormDropdown = _populateFormDropdown;
                vm.route = _route;
                vm.notify = vm.$clientService.getNotifier($scope);
                vm.changeCurrentPage = _changeCurrentPage;
                vm.mapClients = _mapClients;
                vm.onSearchClientChange = _onSearchClientChange;

                function render() {

                    vm.$formService.getAll(vm.getAllFormsSuccess, vm.getAllFormsFail);

                    var renderAction = $route.current.action;

                    vm.showMy = (renderAction == "myClients");
                    vm.showAll = (renderAction == "allClients");
                    vm.clientsExist = true;

                    if (vm.matchedAddress == '') {

                        vm.lon = null;
                        vm.lat = null;

                    }

                    if (renderAction == "allClients") {
                        vm.myClientsDashboard = false;

                        // if lat & lon exist, aka address search has already been submitted, filter
                        if (vm.lon && vm.lat) {
                            vm.$clientService.getAddressesNearbyAllClients(vm.lon, vm.lat, vm.addressRadius, vm.onGetAddressesNearbySuccess, vm.onError);
                        }
                        else {
                            if (vm.allClients == null) {
                                vm.$clientService.getAll(_onGetAllClientSuccess, _onError);
                            } else {
                                vm.displayClients = vm.allClients;
                                vm.showMy = false;
                                vm.showAll = true;
                            }
                        }
                    }

                    else {
                        vm.myClientsDashboard = true;

                        if (vm.lon && vm.lat) {
                            vm.$clientService.getAddressesNearbyMyClients(vm.lon, vm.lat, vm.addressRadius, vm.onGetAddressesNearbySuccess, vm.onError);
                        }

                        else {

                            if (vm.userClients == null) {
                                vm.$clientService.getByUser(_onGetByUserIdSuccess, _onError);
                            } else {
                                vm.displayClients = vm.userClients;
                                vm.showMy = true;
                                vm.showAll = false;
                            }
                        }
                    }
                }

                $scope.$on("$routeChangeSuccess", vm.route);

                function _route($currentRoute, $previousRoute) {

                    render();
                }

                function _onGetByUserIdSuccess(data) {

                    vm.notify(function () {
                        vm.userClients = data;
                        vm.displayClients = vm.userClients;
                        vm.showMy = true;
                        vm.showAll = false;
                    });
                }

                function _onGetAllClientSuccess(data) {

                    vm.notify(function () {
                        vm.allClients = data.items;
                        vm.displayClients = vm.allClients;
                        vm.showMy = false;
                        vm.showAll = true;
                    });
                }

                function _onError() {
                    console.log('Get failed!');
                }


                function _onClickSort(column) {
                    vm.sortType = column;
                    vm.sortReverse = !vm.sortReverse;
                }

                function _submitCAddress(address) {

                    if (address) {

                        vm.$geocoderService.geocode(address, _onGeocode);

                    } else {

                        vm.lon = null;
                        vm.lat = null;
                        vm.lowerLimit = 0;
                        vm.upperLimit = 19;
                        vm.route();

                    }
                }

                function _onGeocode(results, status) {

                    vm.notify(function () {

                        vm.geocodeResponse = JSON.stringify(results, null, "     ");

                        if (results[0]) {

                                vm.matchedAddress = results[0].formatted_address;
                        }

                    });

                    if (status == google.maps.GeocoderStatus.OK) {

                        angular.element('#mapPlaceholder').css('display', 'none');
                        vm.mapHidden = true;

                        var geometry = results[0].geometry;
                        var loc = geometry.location;

                        var lat = loc.lat();
                        var lon = loc.lng();

                        vm.lat = lat;
                        vm.lon = lon;

                        console.log(vm.matchedAddress);
                        console.log(vm.lat, vm.lon);
                        console.log(vm.addressRadius);

                        vm.searchClient = null;

                        if (vm.myClientsDashboard == true) {
                            vm.$clientService.getAddressesNearbyMyClients(lon, lat, vm.addressRadius, vm.onGetAddressesNearbySuccess, vm.onError);
                        }
                        else {
                            vm.$clientService.getAddressesNearbyAllClients(lon, lat, vm.addressRadius, vm.onGetAddressesNearbySuccess, vm.onError);
                        }

                    } else {
                        console.log("nope");
                    }
                }

                function _onGetAddressesNearbySuccess(data) {

                    if (data != null) {

                        vm.notify(function () {
                            vm.displayClients = data;
                            vm.clientsExist = true;
                            console.log(vm.displayClients);
                            angular.element("#map-canvas").css("display", "initial");
                            vm.mapHidden = false;
                        });

                        vm.lowerLimit = 0;
                        vm.upperLimit = 19;

                        vm.coordinatesArray = $.map(vm.displayClients, _createCoordinatesArray);
                        console.log(vm.coordinatesArray);

                        vm.initializeMap();
                    }
                    else {
                        vm.$notificationService.warning("No clients nearby");
                        vm.notify(function () {
                            vm.clientsExist = false;
                            angular.element("#map-canvas").css("display", "none");
                        });
                    }
                }

                function _initializeMap() {

                    var latlng = new google.maps.LatLng(vm.lat, vm.lon);
                    var mapOptions = {
                        zoom: 12,
                        center: latlng
                    }
                    vm.map = new google.maps.Map($('#map-canvas')[0], mapOptions);

                    vm.mapInitialized = true;

                    var marker = new google.maps.Marker({
                        position: {lat: vm.lat, lng: vm.lon},
                        map: vm.map,
                        color: 'blue',
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                        title: vm.matchedAddress
                    });

                    var upperLimit = vm.upperLimit;

                    if (vm.upperLimit > vm.coordinatesArray.length) {

                        upperLimit = vm.coordinatesArray.length - 1;
                    }

                    vm.mapClients(vm.lowerLimit, upperLimit);
                }


                function _mapClients(low, high) {

                    for (var i = 0; i < vm.markers.length; i++) {
                        vm.markers[i].setMap(null);
                    }
                    vm.markers = [];

                    var bounds = new google.maps.LatLngBounds();
                    bounds.extend({ lat: vm.lat, lng: vm.lon });

                    for (var i = low; i <= high; i++) {

                        var currentCoordinates = vm.coordinatesArray[i];

                        var marker = new google.maps.Marker({
                            position: currentCoordinates,
                            map: vm.map,
                            title: currentCoordinates.name
                        });

                        bounds.extend(currentCoordinates);
                        vm.map.fitBounds(bounds);

                        vm.markers.push(marker);
                    }
                }

                function _createCoordinatesArray(object) {

                    var newCoordinatesObject = {
                        lat: object.coordinates.lat,
                        lng: object.coordinates.lon,
                        name: object.name
                    }

                    return newCoordinatesObject;
                }


                function _changeCurrentPage(page) {

                    console.log(page);

                    vm.lowerLimit = vm.pageSize * (page - 1);
                    vm.upperLimit = (vm.pageSize * page) - 1;

                    console.log(vm.lowerLimit + " - " + vm.upperLimit);

                    if (vm.mapInitialized && !vm.mapHidden) {
                        vm.mapClients(vm.lowerLimit, vm.upperLimit);
                    }

                }

                function _onSearchClientChange() {
                    $timeout(_mapFilteredClients);
                }

                function _mapFilteredClients() {

                    if (vm.mapInitialized && !vm.mapHidden) {

                        if (vm.searchClient != '' && vm.searchClient != null) {
                            vm.lowerLimit = 0;
                            vm.pageSize = 1000000;

                            vm.coordinatesArray = $.map(vm.filteredClients, _createCoordinatesArray);
                            console.log(vm.coordinatesArray);

                            var upperLimit = vm.coordinatesArray.length - 1;
                            vm.mapClients(vm.lowerLimit, upperLimit);

                        } else {
                            vm.pageSize = 20;
                            vm.currentPage = 1;
                            vm.lowerLimit = 0;

                            var upperLimit = 19;
                            vm.mapClients(vm.lowerLimit, upperLimit);
                        }
                    }
                }

                function _getAllFormsSuccess(data) {
                    vm.populateFormDropdown(data.items);
                }

                function _populateFormDropdown(formTemplates) {
                    vm.notify(function () {
                        vm.formTemplates = formTemplates;
                    });
                }

                function _onChange(clientId, formTempId) {
                    var route = "/forms/" + formTempId + "/add?clientId=" + clientId
                    vm.$window.location.href = route;
                }

                function _getAllFormsFail(){
                    console.log("failure");
                }
            }
        })();


    </script>
}
